{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Linux Terminal Server Project helps in netbooting LAN clients from a single template installation that resides in a virtual machine image or a chroot on the LTSP server, or the server root (/, chrootless). This way maintaining tens or hundreds of diskless clients is as easy as maintaining a single PC.</p> <p>LTSP has been redesigned and rewritten from scratch in 2019 by alkisg in order to support new technologies like systemd, updated desktop environments, Wayland, UEFI etc. Only the new version is actively developed, while the old one is now called LTSP5 and is in minimal maintenance mode.</p> <p>LTSP automatically configures and uses the following tools:</p> <ul> <li>iPXE: network boot loader that shows the initial client boot menu and loads the kernel/initrd.</li> <li>dnsmasq or isc-dhcp-server: DHCP server that assigns IPs to the clients, or ProxyDHCP server when another DHCP server is used, e.g. a router.</li> <li>dnsmasq or tftpd-hpa: TFTP server that sends ipxe/kernel/initrd to the clients.</li> <li>dnsmasq: optional DNS server for DNS caching or blacklisting.</li> <li>mksquashfs: creates a compressed copy of the template image/chroot/VM to be used as the client root /.</li> <li>NFS or NBD: serve the squashfs image to the network.</li> <li>tmpfs and overlayfs: make the squashfs image temporarily writable for each client, similiarly to live CDs.</li> <li>NFS or SSHFS: access the user's /home directory which resides on the server.</li> <li>SSH or SSHFS or LDAP: authenticate users against the server.</li> </ul> <p>What are you waiting for? Continue to the installation page!</p>"},{"location":"support/","title":"Support","text":"<p>For LTSP support, the following methods are available:</p>"},{"location":"support/#upstream","title":"Upstream","text":"<ul> <li>PDF version of this site: for offline reading</li> <li>Github page: code repositories, pull   requests etc</li> <li>Bug tracker: reporting bugs in the   LTSP code</li> </ul>"},{"location":"support/#community","title":"Community","text":"<ul> <li>Chat room: real time discussions; developers also hang   out there</li> <li>Discussions: asynchronous   discussions; developers also participate there</li> <li>Wiki: guides maintained by the community</li> <li>Old LTSP5 wiki/resources: archived; not   supported anymore</li> </ul>"},{"location":"support/#commercial","title":"Commercial","text":"<ul> <li>Alkis Georgopoulos: the lead LTSP developer is   available for professional support, to install, configure, troubleshoot,   maintain or extend LTSP.</li> <li>If you're offering commercial LTSP support and want to add your link here,   contact the LTSP team.</li> </ul>"},{"location":"support/#bounties","title":"Bounties","text":"<p>You may offer a bounty for implementing a new feature that you'd like to see in LTSP. Just file an issue and mention that you're interested in sponsoring its implementation.</p>"},{"location":"support/#donations","title":"Donations","text":"<p>LTSP is accepting donations via paypal. You may optionally include your nickname to get free LTSP support in the chat room.</p> <p>Thank you for supporting LTSP development!</p>"},{"location":"docs/","title":"Documentation","text":"<p>Read the following pages in order to setup LTSP:</p> <ol> <li>Preparation</li> <li>Installation</li> <li>Personal package archive</li> <li>Netboot clients</li> </ol> <p>For additional security like disabling the iPXE shell, you may also read the security wiki page.</p>"},{"location":"docs/netboot-clients/","title":"Netboot clients","text":"<p>To configure the LTSP clients to boot from the network with the PXE protocol, two methods are used, depending on whether the network card is onboard, in which case you should set appropriate BIOS/UEFI settings, or whether it's in a PCI or PCI-e slot, in which case you should install iPXE.</p>"},{"location":"docs/netboot-clients/#biosuefi","title":"BIOS/UEFI","text":"<p>To enable network booting from your BIOS/UEFI settings, press Del or F2 while your computer boots, and choose one or more of the following options, as appropriate:</p> <ul> <li>Enable onboard NIC</li> <li>Enable LAN boot ROM</li> <li>Boot sequence: network first</li> </ul> <p>LTSP supports both BIOS and UEFI network booting, but not IPv6 network booting yet.</p>"},{"location":"docs/netboot-clients/#ipxe","title":"iPXE","text":"<p>iPXE contains various network drivers and is able to netboot most clients. It can be installed by various forms:</p> <ul> <li>win32-loader.exe: if your clients have a local disk with Microsoft Windows installed in BIOS mode, win32-loader adds a \"Boot from network\" option to the Windows boot manager.</li> <li>grub-ipxe: if your clients have Ubuntu etc, running <code>apt install grub-ipxe</code> adds a \"Boot from network\" option to the Grub boot manager.</li> <li>ipxe.lkrn: can be used in other distributions that don't have the grub-ipxe package.</li> <li>ipxe.iso: iPXE in CD ROM format.</li> <li>ipxe.usb: iPXE in USB format. Just <code>dd</code> it to a USB stick.</li> <li>ipxe.dsk: iPXE in floppy disk format.</li> <li>ipxe.efi: can be copied in a local EFI partition if the clients are UEFI and for some reason the internal PXE stack isn't appropriate.</li> </ul>"},{"location":"docs/ppa/","title":"Personal Package Archive","text":"<p>Stable upstream LTSP releases are offered in .deb package format in the LTSP PPA. They should work in all .deb-based distributions that use systemd, i.e. from Debian Jessie 8 and Ubuntu Xenial 16.04 and upwards.</p> <p>The LTSP PPA is mandatory for distributions before 2020 that have the older LTSP5, and optional but recommended to have in newer distributions. When clients netboot, <code>ltsp init</code> dynamically configures a lot of other packages, like systemd, network-manager, display managers, netplan etc. Some times normal distribution updates of said packages break the netboot process, and urgent LTSP updates provided by the PPA are required to fix it.</p> <p>To install the repository in Ubuntu-based distributions, run as root:</p> <pre><code>add-apt-repository ppa:ltsp\napt update\n</code></pre> <p>To install the repository in Debian-based distributions, run as root:</p> <pre><code>wget https://ltsp.org/misc/ltsp-ubuntu-ppa-focal.list -O /etc/apt/sources.list.d/ltsp-ubuntu-ppa-focal.list\nwget https://ltsp.org/misc/ltsp_ubuntu_ppa.gpg -O /etc/apt/trusted.gpg.d/ltsp_ubuntu_ppa.gpg\napt update\n</code></pre> <p>Note that normally Debian users should not be using PPAs. LTSP is an exception, as it only contains shell code (and a bit of python), it is interpreted (Architecture:all, no compiled binaries involved), and the .debs are tested on Debian too.</p>"},{"location":"docs/preparation/","title":"Preparation","text":"<p>Before installing LTSP, make sure that it fits your needs and that your hardware is appropriate.</p>"},{"location":"docs/preparation/#when-to-use","title":"When to use","text":"<p>The main reason to use LTSP is if you want to maintain a single installation, instead of many. It saves administration time.</p> <p>The older LTSP5 targetted thin clients with reduced hardware specifications; this is no longer the case. The LTSP clients should be able to run the distribution with their own CPU/RAM; except with LTSP they'll be using a network disk instead of a local disk, so they can be diskless.</p>"},{"location":"docs/preparation/#network","title":"Network","text":"<ul> <li>The server \u27fa switch connection should be gigabit; i.e. gigabit server NIC, switch port and 5e+ cabling.</li> <li>The clients \u27fa switch connection may be 100 Mbps.</li> <li>It's best if the LTSP clients are connected to the same switch as the server.</li> </ul> <p>As network performance is very important for LTSP, after it's up and running do a LAN benchmark with epoptes, to make sure the server can send and receive data with at least 800 Mbps bandwidth.</p>"},{"location":"docs/preparation/#server","title":"Server","text":"<p>Any recent PC will do with e.g. 4 GB RAM and 3000 cpubenchmark.net score. An SSD disk for both rootfs and home will probably make client network disk access a bit faster.</p>"},{"location":"docs/preparation/#clients","title":"Clients","text":"<p>Consult your distribution for client specifications. 1 GB RAM with 500 cpubenchmark.net score could be the minimal specs, and 2 GB RAM / 2000+ score the recommended.</p>"},{"location":"docs/installation/","title":"Installation","text":"<p>All the terminal commands in the documentation should be run as root, which means you should initially run <code>sudo -i</code> on Ubuntu or <code>su -</code> on Debian.</p>"},{"location":"docs/installation/#server-os-installation","title":"Server OS installation","text":"<p>The LTSP server can be headless, but it's usually better to install the operating system using a \"desktop\" .iso and not a \"server\" one. All desktop environments should work fine, but MATE receives the most testing. Any .deb-based distribution that uses systemd should work; i.e. from Ubuntu Xenial and Debian Jessie and onward. If you choose Ubuntu, you may also consider removing snap to avoid some issues.</p>"},{"location":"docs/installation/#adding-the-ltsp-ppa","title":"Adding the LTSP PPA","text":"<p>The LTSP PPA is where stable upstream LTSP releases are published. It's mandatory for distributions before 2020 that have the older LTSP5, and optional but recommended to have in newer distributions. Follow the ppa page to add it to your sources, then continue reading here.</p>"},{"location":"docs/installation/#installing-ltsp-server-packages","title":"Installing LTSP server packages","text":"<p>The usual way to transform a normal installation into an LTSP server is to run:</p> <pre><code>apt install --install-recommends ltsp ltsp-binaries dnsmasq nfs-kernel-server openssh-server squashfs-tools ethtool net-tools epoptes\ngpasswd -a administrator epoptes\n</code></pre> <p>Replace administrator with the administrator username. If you're not using the PPA, also replace <code>ltsp-binaries</code> with <code>ipxe</code>. Description of the aforementioned packages:</p> <ul> <li>ltsp: contains the LTSP code, it's common for both LTSP servers and LTSP   clients.</li> <li>ltsp-binaries: contains iPXE and memtest binaries.</li> <li>dnsmasq: provides TFTP and optionally (proxy)DHCP and DNS services. Possible   alternatives are isc-dhcp-server and tftpd-hpa, but only dnsmasq can do   proxyDHCP, so it's the recommended default.</li> <li>nfs-kernel-server: exports the virtual client disk image over NFS.</li> <li>openssh-server: allows clients to authenticate and access /home via SSHFS.</li> <li>ethtool, net-tools: allow disabling Ethernet flow control, to improve LAN   speed when the server is gigabit and some clients are 100 Mbps.</li> <li>epoptes: optional; allows client monitoring and   remote control; the gpasswd command allows the sysadmin to run epoptes.</li> </ul> <p>All those packages can also be displayed with <code>apt show ltsp | grep ^Suggests</code>.</p>"},{"location":"docs/installation/#network-configuration","title":"Network configuration","text":"<p>There are two popular methods to configure LTSP networking. One is to avoid any configuration; this usually means that you have a single NIC on the LTSP server and an external DHCP server, for example a router, pfsense, or a Windows server. In this case, run the following command:</p> <pre><code>ltsp dnsmasq\n</code></pre> <p>Another method is to have a dual NIC LTSP server, where one NIC is connected to the normal network where the Internet is, and the other NIC is connected to a separate switch with just the LTSP clients. For this method to work automatically, assign a static IP of 192.168.67.1 to the internal NIC using Network Manager or whatever else your distribution has, and run:</p> <pre><code>ltsp dnsmasq --proxy-dhcp=0\n</code></pre> <p>You can read about more <code>ltsp dnsmasq</code> options, like --dns or --dns-servers, in its man page.</p>"},{"location":"docs/installation/#maintaining-a-client-image","title":"Maintaining a client image","text":"<p>LTSP supports three methods to maintain a client image. They are documented in the ltsp image man page. You can use either one or all of them. In short, they are:</p> <ul> <li>Chrootless (previously pnp): use the server root (/) as the template for the   clients. It's the easiest method if it suits your needs, as you maintain only   one operating system, not two (server and image).</li> <li>Raw virtual machine image: graphically maintain e.g. a VirtualBox VM.</li> <li>Chroot: manually maintain a chroot   directory using console commands.</li> </ul> <p>In the virtual machine and chroot cases, you're supposed to install the ltsp package to the image, by adding the LTSP PPA and running <code>apt install --install-recommends ltsp epoptes-client</code>, without specifying any other services. In the chrootless and virtual machine cases, if you're using separate partitions for some directories like /boot or /var, see the <code>ltsp image</code> man page EXAMPLES section for how to include them. When the image is ready, to export it in squashfs format and make it available to the clients over NFS, run the following commands.</p> <p>For chrootless:</p> <pre><code>ltsp image /\n</code></pre> <p>Virtual machines need to be symlinked before running <code>ltsp image</code>:</p> <pre><code>ln -s \"/home/user/VirtualBox VMs/debian/debian-flat.vmdk\" /srv/ltsp/debian.img\nltsp image debian\n</code></pre> <p>For a chroot in /srv/ltsp/x86_32:</p> <pre><code>ltsp image x86_32\n</code></pre> <p>You need to run these commands every time you install new software or updates to your image and want to export its updated version.</p>"},{"location":"docs/installation/#configuring-ipxe","title":"Configuring iPXE","text":"<p>After you create your initial image, or if you ever create additional images, run the following command to generate an iPXE menu and copy the iPXE binaries in TFTP:</p> <pre><code>ltsp ipxe\n</code></pre> <p>In LTSP5, syslinux was used, but iPXE replaced it as it's much more powerful. You can read more about it in the ltsp ipxe man page.</p>"},{"location":"docs/installation/#nfs-server-configuration","title":"NFS server configuration","text":"<p>To configure the LTSP server to serve the images or chroots over NFS, run:</p> <pre><code>ltsp nfs\n</code></pre> <p>For finetuning options, see the ltsp nfs man page.</p>"},{"location":"docs/installation/#generate-ltspimg","title":"Generate ltsp.img","text":"<p>A new procedure that wasn't there in LTSP5 is provided by the following command:</p> <pre><code>ltsp initrd\n</code></pre> <p>This compresses /usr/share/ltsp, /etc/ltsp, /etc/{passwd,group} and the server public SSH keys into /srv/tftp/ltsp/ltsp.img, which is transferred as an \"additional initrd\" to the clients when they boot. You can read about its benefits in its man page, for now keep in mind that you need to run <code>ltsp initrd</code> after each LTSP package update, or when you add new users, or if you create or modify /etc/ltsp/ltsp.conf, which replaced the LTSP 5 \"lts.conf\".</p>"},{"location":"docs/installation/#questions","title":"Questions","text":"<p>Questions? Start a discussion or come to the online chat room.</p>"},{"location":"docs/installation/raspbian/","title":"Raspbian","text":"<p>Raspbian has been renamed to Raspberry Pi OS, please update your links to point to the updated documentation page:</p> <p>https://ltsp.org/docs/installation/raspios</p>"},{"location":"docs/installation/raspios/","title":"Raspberry Pi OS","text":"<p>Basic installation instructions for netbooting Raspberry Pi clients from a Raspberry Pi OS (formely Raspbian) chroot on an LTSP server.</p>"},{"location":"docs/installation/raspios/#prerequisites","title":"Prerequisites","text":"<p>The LTSP server should already be configured by following the installation page. If booting x86 clients is also required, do that part first as it's easier.</p>"},{"location":"docs/installation/raspios/#client-configuration","title":"Client configuration","text":"<p>The client configuration is officially documented here. In short:</p> <ul> <li>To netboot Pi 2, format an SD card with the fat file system and put only bootcode.bin in it. This file can be found in /boot/bootcode.bin inside your Raspberry Pi OS image.</li> <li>For Pi 3B, boot from an SD card, run <code>echo program_usb_boot_mode=1 | sudo tee -a /boot/config.txt</code> and reboot.</li> <li>Pi 3B+ supports netbooting out of the box.</li> <li>For Pi 4 and Pi 400, boot from a fully updated SD card to get the latest firmware, then run <code>sudo raspi-config</code> and select <code>Advanced Options &gt; Boot Order &gt; Network Boot</code>.</li> </ul>"},{"location":"docs/installation/raspios/#chroot-preparation","title":"Chroot preparation","text":"<p>Raspberry Pi OS is very optimized for Raspberries, so it's currently a better option than e.g. Ubuntu MATE or other distributions. The easiest way to generate a Raspberry Pi OS chroot isn't with the <code>debootstrap</code> command, but by downloading an image. You may also follow the Raspberry Pi OS installation guide or you may use <code>dd</code> to read the SD card from an existing Raspberry Pi installation; to keep the instructions shorter, we assume that in the end you have an uncompressed raspios.img on the LTSP server.</p> <pre><code>losetup -rP /dev/loop8 2020-12-02-raspios-buster-armhf-full.img\nmount -o ro /dev/loop8p2 /mnt\ntime cp -a /mnt/. /srv/ltsp/raspios\numount /mnt\nmount -o ro /dev/loop8p1 /mnt\ncp -a /mnt/. /srv/ltsp/raspios/boot/\numount /mnt\nlosetup -d /dev/loop8\n</code></pre> <p>At this point, Raspberry Pi OS should be in <code>/srv/ltsp/raspios</code>. This chroot isn't ready for netbooting yet, the following commands are needed:</p> <pre><code># Go to the chroot in order to use relative directories\ncd /srv/ltsp/raspios\n# Mask services that we don't want in netbooting\nsystemctl mask --root=. dhcpcd dphys-swapfile raspi-config resize2fs_once\n# Remove SD card entries from fstab\necho 'proc            /proc           proc    defaults          0       0' &gt;./etc/fstab\n# Use an appropriate cmdline for NFS_RW netbooting\necho 'ip=dhcp root=/dev/nfs rw nfsroot=192.168.67.1:/srv/ltsp/raspios,vers=3,tcp,nolock console=serial0,115200 console=tty1 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles modprobe.blacklist=bcm2835_v4l2' &gt;./boot/cmdline.txt\n</code></pre>"},{"location":"docs/installation/raspios/#server-preparation","title":"Server preparation","text":"<p>In ltsp.conf, set RPI_IMAGE to the chroot name. This will be used by <code>ltsp kernel</code> to generate the appropriate symlinks from <code>/srv/tftp/*</code> to <code>/srv/ltsp/raspios/boot/*</code>.</p> <pre><code>[server]\nRPI_IMAGE=\"raspios\"\n</code></pre> <p>Then, run:</p> <pre><code>ltsp kernel raspios\nltsp initrd\nltsp nfs\n</code></pre>"},{"location":"docs/installation/raspios/#nfs_rw-netbooting","title":"NFS_RW netbooting","text":"<p>At this point we're ready to netboot a single client in NFS_RW mode. This means that whatever changes we do on that client, like installing new programs, are directly saved in /srv/ltsp/raspios.</p> <p>First, export the chroot in NFS read-write mode:</p> <pre><code>echo '/srv/ltsp/raspios  *(rw,async,crossmnt,no_subtree_check,no_root_squash,insecure)' &gt;/etc/exports.d/ltsp-raspios.exports\nexportfs -ra\n</code></pre> <p>You may replace <code>*</code> with an IP to only allow access to a single client, or you may delete the /etc/exports.d/ltsp-raspios.exports file when you're done, so that there are no security issues.</p> <p>Now boot a single client, add the LTSP PPA to your sources, and install the client-side packages:</p> <pre><code>apt install --install-recommends ltsp epoptes-client\n</code></pre>"},{"location":"docs/installation/raspios/#ltsp-mode-netbooting","title":"LTSP mode netbooting","text":"<p>At this point our chroot contains the LTSP code and is ready to be netbooted. But it needs a different kernel cmdline than the NFS_RW mode, so run the following commands:</p> <pre><code>echo 'ip=dhcp root=/dev/nfs nfsroot=192.168.67.1:/srv/ltsp/raspios,vers=3,tcp,nolock init=/usr/share/ltsp/client/init/init ltsp.image=images/raspios.img console=serial0,115200 console=tty1 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles modprobe.blacklist=bcm2835_v4l2' &gt;/srv/ltsp/raspios/boot/cmdline.txt\n\n# Finally, create the squashfs image\nltsp image raspios --mksquashfs-params='-comp lzo'\n</code></pre> <p>That's it, now you should be able to netboot all your Raspberry Pi clients.</p>"},{"location":"guides/","title":"Guides","text":"<p>LTSP follows the Di\u00e1taxis framework, which identifies four documentation models:</p> <ul> <li>Tutorials (learning-oriented): ltsp.org/docs is   meant to be read like a book.</li> <li>How-to guides (task-oriented): ltsp.org/guides can   be searched for guidance on specific tasks.</li> <li>Explanation (understanding-oriented):   github.com/ltsp/ltsp/discussions   is available for asking and providing clarifications.</li> <li>Reference (information-oriented): ltsp.org/man   contains the man pages.</li> </ul> <p>This means that the guides section isn't meant to be read sequentially. Use the search box or the following table of contents to locate the one you're interested in.</p> <p>Documentation contributors and pull requests are most welcome, please contact us in the online chat room for details.</p>"},{"location":"guides/#available-guides","title":"Available guides","text":"<ul> <li>Chat room</li> <li>Coding</li> <li>ISC DHCP server</li> <li>Markdown</li> <li>Netconsole</li> <li>Proposed PPA</li> <li>PXELinux</li> <li>Snap</li> <li>Specifications</li> <li>Versioning</li> </ul>"},{"location":"guides/chat-room/","title":"Chat room","text":"<p>LTSP currently has two online chat rooms with mirrored content:</p> <ul> <li>Matrix room: the main room; it requires signing up for a free matrix account. It also offers logging, voice/video chat and an android application.</li> <li>Libera.chat IRC channel: an IRC channel, bridged with the Matrix room. It allows unregistered users; logs are available at https://irclogs.ltsp.org.</li> </ul> <p>The same rooms can also be used for Epoptes support.</p> <p>Note that the Freenode IRC channel has been deprecated since the move to libera.chat and it's not used anymore.</p>"},{"location":"guides/coding/","title":"Coding","text":""},{"location":"guides/coding/#documentation","title":"Documentation","text":"<p>Man pages for ltsp applets are maintained in markdown format in <code>$SRC/docs</code>. At build time, <code>ronn</code> is used to convert them to man format.</p> <p>The short usage, <code>ltsp --help $APPLET</code>, comes from <code>man ltsp $APPLET | grep ...</code> and is implemented in the <code>usage()</code> function.</p>"},{"location":"guides/coding/#pep8","title":"PEP8","text":"<p>Since shell doesn't have something like PEP8, let's apply whatever makes sense from PEP8. For example, 4 spaces indentation.</p> <p>TODO: heredocs &lt;&lt;- use tabs, and also see: https://www.kernel.org/doc/html/v4.10/process/coding-style.html#indentation.</p> <p>Other remarks:</p> <ul> <li>Don't use periods for single sentence comments or commit messages. Do use periods for multiple sentences. Start with a capital letter, like in online chat rooms.</li> <li>Don't use quotes for numeric constants, e.g. <code>NAT=0</code>.</li> <li>Use quotes for strings, e.g. <code>HOSTNAME=\"pc01\"</code>.</li> <li>Prefer \"=\" over \"-eq\" when a variable might not be numeric even by mistake, e.g. <code>if [ \"$NAT\" = 0 ]</code>.</li> </ul>"},{"location":"guides/coding/#symlinks","title":"Symlinks","text":"<p>If possible, put everything in /usr/share/ltsp and symlink binaries etc to appropriate places in FHS.</p>"},{"location":"guides/coding/#shell-script-coding","title":"Shell script coding","text":"<p>Shell scripts should be able to run on <code>bash</code>, <code>dash</code>, and <code>busybox ash</code>, and they should produce no output when checked with shellcheck like <code>shellcheck -e SC2039 script.sh</code>. Occasionally, checkbashisms can also be used, but ignore its warnings about \"local\" and \"command -v\"; we want these.</p>"},{"location":"guides/coding/#shell-script-extensions","title":"Shell script extensions","text":"<p>Use the .sh extension for all shell scripts. Symlink the public binaries in /usr/[s]bin without extensions.</p>"},{"location":"guides/coding/#variable-case-and-visibility","title":"Variable case and visibility","text":"<p>Almost all the code should be inside functions. Most of the variables should be local and lowercase. Global variables that can be defined in the command line or in configuration files should be UPPERCASE, while global variables for internal use should start with an _UNDERSCORE. When subprocesses are spawned, make sure they only have the environment variables they need.</p>"},{"location":"guides/coding/#functions","title":"Functions","text":"<p>Applets start with their <code>$applet_cmdline()</code> and <code>$applet_main()</code> functions for readability. The rest of the functions should be alphabetically sorted. Complex functions should be preceded by a comment.</p>"},{"location":"guides/coding/#script-directories","title":"Script directories","text":"<p>Most scripts are organized in directories, and numbered as follows:</p> <ul> <li>[0-9][09]|[09][0-9]: site and local admins</li> <li>[1-8][18]|[18][1-8]: distributions, their derivatives and third part programs (sch-scripts, epoptes)</li> <li>[2-7][2-7]: upstream</li> </ul> <p><code>sort -V</code> is used for ordering, so 44-upstream~distro could be a distro override that runs exactly before 44-upstream, while 44-upstream-distro would run afterwards. Extra numbering can be appended when necessary, e.g. 42-0-config-first, 42-1-config-second. Distro or local scripts with the same name in /etc/ltsp/$applet/ completely override the respective upstream scripts.</p> <p>Each NN-script.sh is expected to have a main function derived from the script name: <code>main_$script()</code>. All scripts are first sourced before their main functions are executed. This allows for shell function overriding, e.g. an 8x-distro <code>install_package()</code> function would override a 5x-upstream <code>install_package()</code> function.</p> <p>One of the scripts, ideally the 55-applet.sh, is supposed to provide a function named <code>$applet_cmdline()</code>. This should call getopts to parse the command line and convert it to \"$@\" with <code>eval set</code>, and then call the <code>run_main_functions() \"$@\"</code> function, so that all main functions get the correct parameters.</p>"},{"location":"guides/isc-dhcp-server/","title":"ISC DHCP server","text":"<p>Dnsmasq is the recommended default for LTSP, as it's the only one that supports the proxyDHCP protocol. In some cases though, sysadmins might need isc-dhcp-server. The following template dhcpd.conf works out of the box for dual NIC LTSP setups:</p> <pre><code># This file is part of LTSP, https://ltsp.org\n# Copyright 2019 the LTSP team, see AUTHORS\n# SPDX-License-Identifier: GPL-3.0-or-later\n\n# Configure isc-dhcp-server for LTSP\n# Documentation=man:ltsp(8)\n\nauthoritative;\n# option domain-name \"example.org\";\noption domain-name-servers 192.168.67.1, 8.8.8.8, 208.67.222.222;\noption space ipxe;\noption ipxe-encap-opts code 175 = encapsulate ipxe;\noption ipxe.menu code 39 = unsigned integer 8;\noption ipxe.no-pxedhcp code 176 = unsigned integer 8;\noption arch code 93 = unsigned integer 16;\n\n# This is the LTSP subnet declaration\nsubnet 192.168.67.0 netmask 255.255.255.0 {\nrange 192.168.67.20 192.168.67.250;\noption ipxe.no-pxedhcp 1;\noption routers 192.168.67.1;\n# On single-NIC setups, usually routers != next-server (=TFTP server)\n# option next-server 192.168.67.1\nif exists ipxe.menu {\nfilename \"ltsp/ltsp.ipxe\";\n} elsif option arch = 00:00 {\nfilename \"ltsp/undionly.kpxe\";\n} elsif option arch = 00:07 {\nfilename \"ltsp/snponly.efi\";\n} elsif option arch = 00:09 {\nfilename \"ltsp/snponly.efi\";\n} else {\nfilename \"ltsp/unmatched-client\";\n}\n}\n\n# Example for a host with static IP address and default iPXE menu entry\n# host pc01 {\n#   hardware ethernet 3c:07:71:a2:02:e3;\n#   fixed-address 192.168.67.7;\n#   option host-name \"pc01\";\n#   option root-path \"ipxe-menu-item\";\n# }\n</code></pre> <p>Put it in /etc/dhcpd/dhcpd.conf. If you have Ubuntu and LTSP5, delete /etc/ltsp/dhcpd.conf as it interferes. Then if you also have dnsmasq installed, disable its DHCP service. Finally, restart isc-dhcp-server:</p> <pre><code>ltsp dnsmasq --proxy-dhcp=0 --real-dhcp=0\nsystemctl restart isc-dhcp-server\n</code></pre> <p>If isc-dhcp-server runs somewhere else and not on the LTSP server, you'll probably need to modify the subnet range, the routers, and uncomment next-server and set it to the LTSP server IP. Note that in this case, it's easier to configure your external DHCP server not to offer a boot filename, and just run <code>ltsp dnsmasq</code> to use its default proxyDHCP mode.</p>"},{"location":"guides/markdown/","title":"Markdown","text":"<p>The LTSP project uses GitHub Flavored Markdown, with a few differences noted below.</p>"},{"location":"guides/markdown/#inline-elements","title":"Inline elements","text":"<p>Markdown uses two trailing spaces at the end of a line to indicate a <code>&lt;br /&gt;</code>.</p>"},{"location":"guides/markdown/#text-formatting","title":"Text formatting","text":"Element HTML When to use <code>*asterisk1*</code> em Emphasis <code>**asterisk2**</code> strong Strong importance <code>***asterisk3***</code> em&gt;strong\u00b9 For \u25b8 menus and GUI labels <code>`backtick`</code> code <code>commands, filenames, terminal stuff</code> <code>*`a1&gt;b`*</code> em&gt;code <code>Smart roles</code>\u00b2 <code>**`a2&gt;b`**</code> strong&gt;code Keystrokes: <code>Ctrl</code>+<code>Alt</code>+<code>Del</code>"},{"location":"guides/markdown/#notes","title":"Notes","text":"<ol> <li>Pymarkdown renders <code>***</code> as <code>strong&gt;em</code>, while markdown-it as <code>em&gt;strong</code>.    We cover both cases in our CSS.</li> <li>Smart roles are not implemented nor used yet. For example, <code>page</code> could    automatically link to page.md and show a tooltip with its title.</li> <li>In vscode-markdown-extended, underscore is rendered as u (underline) instead    of em. Also some other parsers have issues with underscores. Avoid them,    e.g. don't use <code>_text_</code> for emphasis.</li> </ol>"},{"location":"guides/markdown/#images","title":"Images","text":"<p>A normal image is <code>![alt](image.png)</code> and a link is <code>[text](url)</code>.</p> <p>For right-aligned, shrinked, clickable images, use this syntax: <code>[![](image.png)](image.png)</code></p>"},{"location":"guides/markdown/#block-elements","title":"Block elements","text":""},{"location":"guides/markdown/#code-blocks","title":"Code blocks","text":"<p>Use fenced code blocks for multiline shell code:</p> <pre><code>```shell\ncode\n```\n</code></pre> <p>Blank lines are not necessary. Do not use four spaces to indicate code blocks as some markdown implementations get confused e.g. in list &gt; code, then code.</p>"},{"location":"guides/markdown/#lists","title":"Lists","text":"<p>In the original markdown and in pymarkdown, indentation is always four spaces. This is necessary when we need to nest lists, admonitions etc, so we may use it always. Typing <code>Tab</code> after the dash is usually enough.</p> <ol> <li> <p>For numbered lists, <code>1.\u2423\u2423actual numbers</code> with two spaces</p> <ul> <li>For bulleted lists, <code>-\u2423\u2423\u2423dashes</code> with three spaces</li> </ul> </li> </ol>"},{"location":"guides/markdown/#admonitions","title":"Admonitions","text":"<p>For now the pymarkdown-extras syntax is used, which is also supported by vscode-markdown-extended:</p> <p>Optional tip title</p> <p>Let's hope pymarkdown gets support for general purpose blocks similar to pandoc's fenced divs!</p>"},{"location":"guides/markdown/#markdown-research-notes","title":"Markdown research notes","text":""},{"location":"guides/markdown/#classes","title":"Classes","text":"<p>It's possible to add classes to any inline element by appending <code>{.class}</code> to its right, while in block elements it goes underneath. Kramdown uses <code>{:.class}</code> instead, and it's supported by pymarkdown, but not by vscode-markdown-extended.</p>"},{"location":"guides/markdown/#admonitions_1","title":"Admonitions","text":"<p>[!NOTE] Blockquotes are used for admonitions by the Microsoft Docs Authoring Pack</p> <p>\ud83d\udcdd NOTE The same thing could be achieved by standard markdown and classes. Unfortunately, pymarkdown can only add the class to either the first or the last blockquote line, not to all of it.</p>"},{"location":"guides/netconsole/","title":"Netconsole","text":"<p>Linux logs important messages, like out-of-memory conditions or module problems or kernel crashes, to the kernel ring buffer, which we can normally inspect with the <code>dmesg</code> command. They also show up on the screen if Linux is running in text mode, but not if it's running in graphics mode.</p> <p>This means that if an LTSP client crashes, we frequently can't even see why it crashed. To remedy this, one can enable the netconsole module, and forward the client kernel messages to the server.</p> <p>To enable netconsole:</p> <ul> <li>First run <code>ip l</code> on a client to see its Ethernet adapter name, for example <code>enp0s3</code>.</li> <li>Then add this parameter to the client kernel cmdline: <code>netconsole=@${ip}/enp0s3,@${srv}/</code> If you're not using iPXE, manually replace <code>${ip}</code> and <code>${srv}</code> with the IPs of the client and the server.</li> <li>You may also add <code>loglevel=5</code> to see more messages; the default is 4, and the valid values are 0-8.</li> <li>If you use loglevel, you may also need <code>POST_INIT_NETCONSOLE=\"rm -f /etc/sysctl.d/10-console-messages.conf\"</code> in ltsp.conf, otherwise that file resets the <code>/proc/sys/kernel/printk</code> contents to <code>4 4 1 7</code>.</li> </ul> <p>When you want to inspect the client messages, run one of the following commands on the server:</p> <ul> <li><code>socat UDP-LISTEN:6666,fork -</code> (safer)</li> <li><code>nc -l -u 6666</code></li> </ul> <p>Note: this was tested on initramfs-tools (Debian-based), but not on dracut (Fedora-based).</p>"},{"location":"guides/proposed-ppa/","title":"Proposed PPA","text":"<p>See also: LTSP PPA documentation.</p> <p>LTSP releases are normally published in the LTSP proposed PPA and after a few days, if noone complains about regressions, they are copied to the LTSP PPA. That means that most LTSP administrators should have the proposed PPA in some test installation or in their personal computers etc, to be able to test new releases and file issues before they reach their production setups.</p> <p>To install the repository in Ubuntu-based distributions, run as root:</p> <pre><code>add-apt-repository ppa:ltsp/proposed\napt update\n</code></pre> <p>To install the repository in Debian-based distributions, run as root:</p> <pre><code>wget https://ltsp.org/misc/ltsp-ubuntu-proposed-focal.list -O /etc/apt/sources.list.d/ltsp-ubuntu-proposed-focal.list\nwget https://ltsp.org/misc/ltsp_ubuntu_ppa.gpg -O /etc/apt/trusted.gpg.d/ltsp_ubuntu_ppa.gpg\napt update\n</code></pre>"},{"location":"guides/pxelinux/","title":"PXELinux","text":"<p>iPXE is the recommended default for LTSP, as it has great support for UEFI and HTTP, it provides a scripting language with variables, conditional instructions, dynamic menus etc. It even includes drivers for many popular network cards, and it's required for netbooting when the NIC isn't onboard and there's no BIOS \"driver\" for it.</p> <p>For onboard NICs, iPXE tries to implement the aforementioned functionality using /srv/tftp/ltsp/undionly.kpxe. This is a wrapper driver that uses the underlying BIOS PXE stack, but in certain cases the PXE stack may be buggy and cause iPXE to either fail with e.g. \"Network unreachable\" or even to completely hang.</p> <p>One workaround is to execute the following command on the LTSP server in order to replace undionly.kpxe with ipxe.pxe:</p> <pre><code>sudo wget https://boot.ipxe.org/ipxe.pxe -O /srv/tftp/ltsp/undionly.kpxe\n</code></pre> <p>While undionly.kpxe only contains the wrapper driver, ipxe.pxe contains all the iPXE drivers. If a native driver exists, it'll be used and it will probably work fine.</p> <p>Thus, the rest of this page refers to the following scenario:</p> <ul> <li>The NIC is onboard (it has a PXE stack)</li> <li>You're using BIOS, not UEFI</li> <li>Neither undionly.kpxe nor ipxe.pxe worked</li> </ul> <p>If these conditions are met, PXELinux might help, as it's simpler and doesn't exploit all the functionality of the (possibly buggy) PXE stack. To install PXELinux on your LTSP server, run:</p> <pre><code>sudo -i\ncd /srv/tftp/ltsp\napt install pxelinux syslinux\nln -s /usr/lib/PXELINUX/pxelinux.0 pxelinux.0\nln -s /usr/lib/syslinux/modules/bios isolinux\nmkdir -p pxelinux.cfg\nwget https://ltsp.org/guides/pxelinux.txt -O pxelinux.cfg/default\n</code></pre> <p>The next step is to configure dnsmasq to point one or more clients to use PXELinux instead of iPXE. Create <code>/etc/dnsmasq.d/local.conf</code> with the following content:</p> <pre><code># Documentation=https://ltsp.org/guides/pxelinux/\ndhcp-mac=set:pxelinux,52:54:61:67:00:01\npxe-service=tag:pxelinux,X86PC,\"pxelinux.0\",ltsp/pxelinux.0\ndhcp-boot=tag:pxelinux,ltsp/pxelinux.0\n</code></pre> <p>In the <code>dhcp-mac=</code> line, it's possible to use wildcards, e.g. <code>dhcp-mac=set:pxelinux,08:00:27:*:*:*</code> would match all VirtualBox clients. Run the following command to restart dnsmasq:</p> <pre><code>sudo systemctl restart dnsmasq\n</code></pre> <p>Then restart the problematic LTSP clients. If they boot successfully with PXELinux, you may optionally fine-tune its menu by editing its configuration file, <code>/srv/tftp/ltsp/pxelinux.cfg/default</code>.</p>"},{"location":"guides/snap/","title":"Snap","text":"<p>There's some controversy regarding snap, Ubuntu's new packaging format. LTSP does its best to support it, but occasionally some issues arise with it that can't be solved from the LTSP side, for example wasting RAM in live sessions or not working with NFS home.</p> <p>If you decide to remove snap, you may open a terminal, type <code>sudo -i</code> to become root, and then copy/paste all the following code:</p> <pre><code>re() {\nif ! \"$@\"; then\necho \"Command failed: $*\" &gt;&amp;2\nexit 1\nfi\n}\n\nremove_snap() {\nlocal packages\n\n    if [ -x /usr/bin/mate-session ]; then\npackages=$(dpkg-query -W -f='${Package} ${Version}\\n' arctica-greeter-guest-session ayatana-indicator-application evolution-common indicator-application mate-hud 2&gt;/dev/null | awk '$2 { print $1 }') || true\nif [ -n \"$packages\" ]; then\necho \"Removing some MATE cruft: $packages\"\nre apt-get purge --yes --auto-remove $packages\nfi\nfi\nif [ -x /usr/bin/snap ]; then\nif [ -f /var/lib/snapd/desktop/applications/firefox_firefox.desktop ] &amp;&amp;\n[ ! -L /var/lib/snapd/desktop/applications/firefox_firefox.desktop ]; then\necho \"Replacing Firefox snap with deb using MozillaTeam PPA\"\n# Remove firefox before snapd to work around LP: #1998710\nsnap remove firefox 2&gt;/dev/null || true\nre add-apt-repository --yes ppa:mozillateam/ppa\n            echo 'Package: *\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001' &gt;/etc/apt/preferences.d/60mozillateam-ppa\n            # If you need more locales e.g. firefox-locale-el add them in this line\nre apt-get install --yes firefox firefox-locale-en\n            if [ -f /usr/share/mate/applications/firefox.desktop ]; then\nre dpkg-divert --package sch-scripts --divert \\\n/usr/share/mate/applications/firefox-desktop.diverted \\\n--rename /usr/share/mate/applications/firefox.desktop\n            fi\nfi\n# Remove snapd, THEN provide a symlink to deb firefox for panels etc\nre apt-get purge --yes --auto-remove snapd\n        if [ ! -e /var/lib/snapd/desktop/applications/firefox_firefox.desktop ]; then\nre mkdir -p /var/lib/snapd/desktop/applications\n            re ln -s /usr/share/applications/firefox.desktop /var/lib/snapd/desktop/applications/firefox_firefox.desktop\n        fi\nfi\n}\n\nremove_snap\n</code></pre>"},{"location":"guides/specs/","title":"Specifications","text":"<p>When asking for LTSP advice, it's a good idea to share as much information as possible. Here's an example:</p> <ul> <li>1 server: i7-8750H with 12403 cpubenchmark score and 8 GB RAM</li> <li>10 clients: i3-6100 with 5483 cpubenchmark score and 4 GB RAM</li> <li>2 switches: one 8 port gigabit and one 8 port 100 Mbps</li> <li>Software: LTSP version 20.04, distribution Ubuntu 20.04.1, flavour MATE, kernel 5.4</li> <li>Use case: running educational applications and browsing</li> </ul> <p>So, saying \"I have a quad core CPU\" isn't appropriate feedback, as it may have 1000 or 10000 score. It's best to mention the exact CPU, its cpubenchmark.net score, and how much RAM it has.</p>"},{"location":"guides/versioning/","title":"Versioning","text":"<p>Taking into account the Debian policy, LTSP uses the following calver versioning scheme:</p> <ul> <li>20.04: a typical upstream release in April 2020</li> <li>20.04.2: additional releases within the same month add a counter</li> <li>20.04.10: rarely, maintenance upstream releases for older LTSP versions may be needed when grave bugs are backported or security issues are discovered; since these will be kept in separate repositories, they can just bump that month's counter, or use \"+\"</li> </ul> <p>Distribution package versioning should be separated with a hyphen \"-\" or tilde \"~\":</p> <ul> <li>20.04-3: the third Debian packaging of the 20.04 release</li> <li>20.04-3ubuntu1: an Ubuntu-patched version of the aforementioned Debian package</li> <li>20.04-1~ubuntu20.04.1: an LTSP stable PPA build; debian/changelog contains the released version</li> <li>20.04-1+ubuntu20.04.1: an LTSP proposed PPA build; debian/changelog contains the older version</li> </ul> <p>Note: the YYYY.MM scheme was also considered, but it's longer, and YY.MM can easily be upgraded to YYYY.MM or to YYMM, but not the opposite.</p>"},{"location":"man/","title":"Man pages","text":"<p>The LTSP man pages are the best source of information for LTSP. They are generated from markdown files in the LTSP source code. You may run <code>man ltsp applet</code> to read them from your terminal, or you may read them online here:</p> <ul> <li>ltsp: entry point to Linux Terminal Server Project applets</li> <li>ltsp.conf: configuration file for LTSP</li> <li>ltsp dnsmasq: configure dnsmasq for LTSP</li> <li>ltsp image: generate a squashfs image from an image source</li> <li>ltsp info: gather support information about the LTSP installation</li> <li>ltsp initrd: create the ltsp.img initrd add-on</li> <li>ltsp ipxe: install iPXE binaries and configuration in TFTP</li> <li>ltsp kernel: copy the kernel and initrd from an image to TFTP</li> <li>ltsp nfs: configure NFS exports for LTSP</li> <li>ltsp remoteapps: run applications on the LTSP server via ssh -X</li> </ul>"},{"location":"man/ltsp-dnsmasq/","title":"ltsp-dnsmasq","text":""},{"location":"man/ltsp-dnsmasq/#name","title":"NAME","text":"<p>ltsp dnsmasq - configure dnsmasq for LTSP</p>"},{"location":"man/ltsp-dnsmasq/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] dnsmasq [-d dns] [-p proxy-dhcp] [-r real-dhcp] [-s dns-server] [-t tftp]</p>"},{"location":"man/ltsp-dnsmasq/#description","title":"DESCRIPTION","text":"<p>Install /etc/dnsmasq.d/ltsp-dnsmasq.conf, while adjusting the template with the provided parameters.</p>"},{"location":"man/ltsp-dnsmasq/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -d, --dns=0|1 Enable or disable the DNS service. Defaults to 0. Enabling the DNS service of dnsmasq allows caching of client requests, custom DNS results, blacklisting etc, and automatically disables DNSStubListener in systemd-resolved on the LTSP server. -p, --proxy-dhcp=0|1 Enable or disable the proxy DHCP service. Defaults to 1. Proxy DHCP means that the LTSP server sends the boot filename, but it leaves the IP leasing to an external DHCP server, for example a router or pfsense or a Windows DHCP server. It's the easiest way to set up LTSP, as it only requires a single NIC with no static IP, no need to rewire switches etc. -r, --real-dhcp=0|1 Enable or disable the real DHCP service. Defaults to 1. In dual NIC setups, you only need to configure the internal NIC to a static IP of 192.168.67.1; LTSP will try to autodetect everything else. The real DHCP service doesn't take effect if your IP isn't 192.168.67.x, so there's no need to disable it in single NIC setups unless you want to run isc-dhcp-server on the LTSP server. -s, --dns-server=\"space separated list\" Set the DNS server DHCP option. Defaults to autodetection. Proxy DHCP clients don't receive DHCP options, so it's recommended to use the ltsp.conf DNS_SERVER parameter when autodetection isn't appropriate. -t, --tftp=0|1 Enable or disable the TFTP service. Defaults to 1."},{"location":"man/ltsp-dnsmasq/#examples","title":"EXAMPLES","text":"<p>Create a default dnsmasq configuration, overwriting the old one:</p> <pre><code>ltsp dnsmasq\n</code></pre> <p>A dual NIC setup with the DNS service enabled:</p> <pre><code>ltsp dnsmasq -d1 -p0 --dns-server=\"0.0.0.0 8.8.8.8 208.67.222.222\"\n</code></pre>"},{"location":"man/ltsp-image/","title":"ltsp-image","text":""},{"location":"man/ltsp-image/#name","title":"NAME","text":"<p>ltsp image - generate a squashfs image from an image source</p>"},{"location":"man/ltsp-image/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] image [-b backup] [-c cleanup] [-i ionice] [-k kernel-initrd] [-m mksquashfs-params] [-r revert] [image] ...</p>"},{"location":"man/ltsp-image/#description","title":"DESCRIPTION","text":"<p>Compress a virtual machine image or chroot directory into a squashfs image, to be used as the network root filesystem of LTSP clients. It's used in similar fashion to live CDs, i.e. all clients will boot from this single read only image and then use SSHFS or NFS to mount /home/username from the server.</p>"},{"location":"man/ltsp-image/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -b, --backup=0|1 Backup /srv/ltsp/images/image.img to image.img.old. Defaults to 1. -c, --cleanup=0|1 Create a writeable overlay on top of the image source and temporarily remove user accounts and sensitive data before calling mksquashfs. Defaults to 1. -i, --ionice=cmdline Set a prefix command to run mksquashfs with a lower priority, or specify \"\" to disable it completely. Defaults to <code>nice ionice -c3</code>. -k, --kernel-initrd=glob-regex Pass this parameter to the <code>ltsp kernel</code> call after the squashfs creation. See ltsp-kernel(8) for more information. -m, --mksquashfs-params=\"params\" Pass $params to the mksquashfs call unquoted; so params shouldn't contain spaces. See mksquashfs(1) for more information. -r, --revert[=0|1] Move /srv/ltsp/images/image.img.old to image.img and call <code>ltsp kernel image</code>. Useful when the clients won't boot with the new image."},{"location":"man/ltsp-image/#image-types","title":"IMAGE TYPES","text":"<p>There are three \"image\" types in LTSP, in the following locations. The /srv/ltsp path can be configured using <code>ltsp --base-dir=</code>:</p> /srv/ltsp/img_name.img Source images are placed directly under /srv/ltsp and usually are symlinks to virtual machine raw disk files. They're only used by <code>ltsp image</code>. /srv/ltsp/img_name Chroot directories can be used both as sources for <code>ltsp image</code> and as NFS root exports for the clients. /srv/ltsp/images/img_name.img Exported images (usually squashfs) are placed under the images directory and the clients can netboot from them. <p>Images can be specified as simple names like <code>ltsp image img_name</code>, in which case the aforementioned locations are searched, or as or full paths like <code>ltsp image ~/VMs/vm.img</code>.</p> <p>The supported image types result in the following three methods to use LTSP. You may use either one of the methods or even all of them at the same time.</p>"},{"location":"man/ltsp-image/#chrootless","title":"CHROOTLESS","text":"<p>Chrootless LTSP, previously called \"ltsp-pnp\", is the recommended way to maintain LTSP if its restrictions are acceptable. In this mode, the server operating system itself is exported into a squashfs file and used for netbooting all the clients. You, the sysadmin, would use the typical GUI tools to manage the server, like software centers or update managers. Then whenever necessary, you'd run:</p> <pre><code>ltsp image /\n</code></pre> <p>This creates or updates /srv/ltsp/images/x86_64.img (the arch name comes from <code>uname -m</code>). Then, all the clients should be able to boot from x86_64.img and have a desktop environment identical to the server.</p> <p>The big advantage of the chrootless mode is simplicity: there are no virtual machines or chroots involved. You'd maintain the server like any \"home desktop PC\", and have all clients be exact replicas, which is as simple as it gets.</p> <p>The disadvantages are that the clients need to have the same architecture as the server (e.g. all x86_64), and that the server can't be a \"full blown server\" with LDAP and Apache and a lot of other services, without taking care to disable those services on the clients with the MASK_SYSTEM_SERVICES parameter of ltsp.conf. Note that MASK_SYSTEM_SERVICES already includes Apache and MySQL and a few other popular services that we don't want in LTSP clients, so it's not a problem if you install Apache on the LTSP server.</p> <p>If for some reason you prefer a different name to <code>uname -m</code>, you may create a symlink:</p> <pre><code>ln -s / ~/amd64\n</code></pre> <p>...and run <code>ltsp image ~/amd64</code> instead.</p>"},{"location":"man/ltsp-image/#vm-images","title":"VM IMAGES","text":"<p>If the chrootless case doesn't fit you, you may use VirtualBox, virt-manager, KVM, VMWare and similar tools to maintain one or more template images for the clients. As an example, let's suppose you create a VM in VirtualBox and call it \"debian\". At the disk creation dialog, select \"VMDK\" type and \"Fixed size\", not \"Dynamically allocated\". Proceed with installing Debian on it. In the partitioning step, make sure that the whole operating system goes in the first partition, without extra partitions for /boot etc. BIOS/MBR is easier, while if you have to use GPT/UEFI, put the EFI partition second. When you're done, close VirtualBox and symlink the VM disk so that LTSP finds it more easily:</p> <pre><code>ln -rs ~/VirtualBox\\ VMs/debian/debian-flat.vmdk /srv/ltsp/debian.img\n</code></pre> <p>To export this image to the clients, after the initial creation or after updates etc, you'd run:</p> <pre><code>ltsp image debian\n</code></pre> <p>It's also possible to omit the symlink by running:</p> <pre><code>ltsp image ~/VirtualBox\\ VMs/debian/debian-flat.vmdk\n</code></pre> <p>...but then the image name shown in the iPXE boot menu would be \"debian-flat\", which isn't pretty.</p> <p>In summary, you may symlink raw VM disks in /srv/ltsp/img_name.img, and <code>ltsp image img_name</code> will allow LTSP clients to netboot from them. Please also see the DIRECT IMAGES section of ltsp-kernel(8) for an advanced method of allowing clients to netboot directly from a VM or .iso image without even running <code>ltsp image</code>, and the ADVANCED IMAGE SOURCES section of ltsp-ipxe(8) for extreme cases like telling the LTSP clients to boot from an .iso image inside a local disk partition!</p>"},{"location":"man/ltsp-image/#chroots","title":"CHROOTS","text":"<p>Chroot directories in /srv/ltsp/img_name are properly supported as image sources by LTSP, but their creation and maintenance are left to external tools like debootstrap, lxc etc. The <code>ltsp-build-client</code> LTSPv5 tool no longer exists. LTSP users are invited to create appropriate documentation in the community wiki. As a small example, you can use kvm to netboot a chroot and maintain it if you NFS-export /srv/ltsp/img_name in rw mode for your server IP, and then run</p> <pre><code>kvm -m 512 -kernel img_name/vmlinuz -initrd img_name/initrd.img \\\n-append \"rw root=/dev/nfs nfsroot=192.168.67.1:/srv/ltsp/img_name\"\n</code></pre>"},{"location":"man/ltsp-image/#examples","title":"EXAMPLES","text":"<p>Use the server installation as a template to generate a client image (chrootless, previously called ltsp-pnp):</p> <pre><code>ltsp image /\n</code></pre> <p>Inform <code>ltsp image</code> that a chrootless installation uses separate /boot and /opt partitions:</p> <pre><code>ltsp image /,,/boot,subdir=boot,,/opt,subdir=opt\n</code></pre> <p>Compress the /srv/ltsp/x86_64 chroot or the /srv/ltsp/x86_64.img virtual machine image, whichever exists of those two, into /srv/ltsp/images/x86_64.img, while disabling ionice:</p> <pre><code>ltsp image --ionice=\"\" x86_64\n</code></pre> <p>Specify an absolute path to a virtual machine image:</p> <pre><code>ltsp image /home/user/VirtualBox\\ VMs/x86_32/x86_32-flat.vmdk\n</code></pre> <p>Revert to the the previous version of the \"chrootless\" image:</p> <pre><code>ltsp image -r /\n</code></pre>"},{"location":"man/ltsp-info/","title":"ltsp-info","text":""},{"location":"man/ltsp-info/#name","title":"NAME","text":"<p>ltsp info - display troubleshooting information about ltsp server and images</p>"},{"location":"man/ltsp-info/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] info</p>"},{"location":"man/ltsp-info/#description","title":"DESCRIPTION","text":"<p>Display the LTSP version and the available chroots, VMs and images. This applet is very minimal currently, it will be developed further in the future.</p>"},{"location":"man/ltsp-info/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p>"},{"location":"man/ltsp-initrd/","title":"ltsp-initrd","text":""},{"location":"man/ltsp-initrd/#name","title":"NAME","text":"<p>ltsp initrd - create the ltsp.img initrd add-on</p>"},{"location":"man/ltsp-initrd/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] initrd</p>"},{"location":"man/ltsp-initrd/#description","title":"DESCRIPTION","text":"<p>Create a secondary initrd in /srv/tftp/ltsp/ltsp.img, that contains the LTSP client code from /usr/share/ltsp/{client,common} and everything under /etc/ltsp, including the ltsp.conf settings file. Additionally it contains the server users and groups lists (passwd/group) and public SSH keys. LTSP clients receive this initrd in addition to their usual one.</p> <p>This means that whenever you add new users or edit ltsp.conf(5), you need to run <code>ltsp initrd</code> to update ltsp.img, and reboot the clients.</p> <p>It also means that you can very easily put template xorg.conf or sshfs or other files in /etc/ltsp, and have them on the clients in seconds, without having to run <code>ltsp image</code>.</p>"},{"location":"man/ltsp-initrd/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p>"},{"location":"man/ltsp-initrd/#examples","title":"EXAMPLES","text":"<p>Most live CDs do not contain sshfs, so by default you can only use NFS home with them. But sshfs is a small binary without many dependencies, so you may usually provide it to the clients if you include it to ltsp.img:</p> <pre><code>mkdir -p /etc/ltsp/bin\ncp /usr/bin/sshfs /etc/ltsp/bin/sshfs-$(uname -m)\nltsp initrd\n</code></pre> <p>You can even provide multiple sshfs versions for different architectures. LTSP contains code to automatically use those sshfs binaries if it can't find the /usr/bin/sshfs one.</p>"},{"location":"man/ltsp-ipxe/","title":"ltsp-ipxe","text":""},{"location":"man/ltsp-ipxe/#name","title":"NAME","text":"<p>ltsp ipxe - install iPXE binaries and configuration in TFTP</p>"},{"location":"man/ltsp-ipxe/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] ipxe [-b binaries]</p>"},{"location":"man/ltsp-ipxe/#description","title":"DESCRIPTION","text":"<p>Generate the ltsp.ipxe configuration file and install the required iPXE binaries in /srv/tftp/ltsp: memtest.0, memtest.efi, snponly.efi and undionly.kpxe.</p> <p>An ltsp-binaries package is available in the LTSP PPA that provides them; otherwise, some of them are automatically found in the ipxe/memtest86+ packages.</p>"},{"location":"man/ltsp-ipxe/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -b, --binaries[=0|1|\"\"] Reinstall the iPXE binaries in TFTP even if they already exist. Defaults to \"\", which means \"only install the missing ones\". Note that the --overwrite flag doesn't affect the binaries, they're only controlled by the --binaries flag."},{"location":"man/ltsp-ipxe/#advanced-image-sources","title":"ADVANCED IMAGE SOURCES","text":"<p>This section is for advanced LTSP sysadmins. Normally, image sources are simple names like \"x86_64\" or full paths like \"../path/to/image\". But the \"img_src\" parameters are much more flexible than that; specifically, they are series of mount sources:</p> <pre><code>img1,mount-options1,,img2,mount-options2,,...\n</code></pre> <p>...where img1 may be a simple name or full path relative to the current directory, and img2+ are full paths relative to the target directory.</p> <p>Let's see an advanced example: suppose that your clients came with Windows, and that you copied a live CD into C:\\ltsp\\ubuntu.iso, and you want your LTSP clients to use that for speed. First, disable Windows fast boot and hibernation, so that Linux is able to mount its partition. Then create the following \"method\" in ltsp.ipxe:</p> <pre><code>:local_image\n# The \"local_image\" method boots C:\\ltsp\\ubuntu.iso\nset cmdline_method root=/dev/sda1 ltsp.image=ltsp/ubuntu.iso,fstype=iso9660,loop,ro,,casper/filesystem.squashfs,squashfs,loop,ro loop.max_part=9\ngoto ltsp\n</code></pre> <p>Explanation:</p> <ul> <li>The root=/dev/sda1 parameter tells the initramfs to mount /dev/sda1 into   /root.</li> <li>Then the LTSP code will look under /root/ltsp/ and mount ubuntu.iso using the   loop,ro options over /root again.</li> <li>Then the LTSP code will look under /root/casper/ and mount   filesystem.squashfs over /root again. This casper/filesystem.squashfs path is   where the live filesystem exists inside the Ubuntu live CDs.</li> </ul> <p>So while this long line gives a good example on using advanced image sources, the LTSP code is actually smart enough to autodetect Ubuntu live CDs and filesystem types, so one could simplify it to:</p> <pre><code>:local_image\n# The \"local_image\" method boots C:\\ltsp\\${img}.img\nset cmdline_method root=/dev/sda1 ltsp.image=ltsp/${img}.img loop.max_part=9\ngoto ltsp\n</code></pre> <p>The ${img} parameter is the name of the menu; it would be \"ubuntu\" if you copied ubuntu.iso in /srv/ltsp/images/ubuntu.img and ran <code>ltsp ipxe</code>.</p>"},{"location":"man/ltsp-ipxe/#examples","title":"EXAMPLES","text":"<p>Initial use:</p> <pre><code>ltsp ipxe\n</code></pre> <p>Regenerate ltsp.ipxe and reinstall the binaries:</p> <pre><code>ltsp ipxe -b\n</code></pre> <p>Copy the binaries from a USB stick before running ltsp ipxe:</p> <pre><code>mkdir -p /srv/tftp/ltsp\ncd /media/administrator/usb-stick\ncp {memtest.0,memtest.efi,snponly.efi,undionly.kpxe} /srv/tftp/ltsp\nltsp ipxe\n</code></pre>"},{"location":"man/ltsp-kernel/","title":"ltsp-kernel","text":""},{"location":"man/ltsp-kernel/#name","title":"NAME","text":"<p>ltsp kernel - copy the kernel and initrd from an image to TFTP</p>"},{"location":"man/ltsp-kernel/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] kernel [-k kernel-initrd] [image] ...</p>"},{"location":"man/ltsp-kernel/#description","title":"DESCRIPTION","text":"<p>Copy vmlinuz and initrd.img from an image or chroot to TFTP. If image is unspecified, process all of them. For simplicity, only chroot directories and raw images are supported, either full filesystems (squashfs, ext4) or full disks (flat VMs). They may be sparse to preserve space. Don't use a separate /boot nor LVM in disk images. The targets will always be named vmlinuz and initrd.img to simplify ltsp.ipxe.</p>"},{"location":"man/ltsp-kernel/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -k, --kernel-initrd=glob-regex Specify a kernel glob and an initrd regex to locate them inside the image; try to autodetect if undefined. See the EXAMPLES section below."},{"location":"man/ltsp-kernel/#direct-images","title":"DIRECT IMAGES","text":"<p>This section is for advanced LTSP sysadmins. Let's suppose that you want to test if your users would prefer Xubuntu to your existing Ubuntu MATE. First, move and rename your Xubuntu CD to this location, without using symlinks, and then update kernels and ipxe:</p> <pre><code>mv xubuntu-18.04-desktop-amd64.iso /srv/ltsp/images/xubuntu-18.04.img\nltsp kernel xubuntu-18.04\nltsp ipxe\n</code></pre> <p>If you reboot your clients, they'll now have the option to boot with the Xubuntu live CD in LTSP mode! This is like booting with the live CD, except that all the users and their homes are available! So the users can normally login and work for days or weeks in the new environment, before you decide that they like Xubuntu and that you want to move from using the live CD to maintaining a Xubuntu image using a virtual machine.</p> <p>You can also do this with virtual machine images! For example:</p> <pre><code>mv ~/VirtualBox\\ VMs/debian/debian-flat.vmdk /srv/ltsp/images/debian-vm.img\nln -rs /srv/ltsp/images/debian-vm.img ~/VirtualBox\\ VMs/debian/debian-flat.vmdk\nltsp kernel debian-vm\nltsp ipxe\n</code></pre> <p>These commands move your \"debian\" VM to the LTSP images directory, symlink it back to where VirtualBox expects it, and update the kernels and ipxe. After these, you'll be able to boot directly from the \"debian-vm\" iPXE menu item without having to run <code>ltsp image</code>! It's the fastest way to test image changes without waiting 10 minutes for <code>ltsp image</code> each time.</p> <p>Some advanced users may think of using the opposite symlink instead:</p> <pre><code>ln -rs ~/VirtualBox\\ VMs/debian/debian-flat.vmdk /srv/ltsp/images/debian-vm.img\n</code></pre> <p>Unfortunately NFS doesn't follow symlinks outside of the exported directories, so the clients wouldn't be able to boot in this case. Advanced users may use bind mounts though, e.g.:</p> <pre><code>mount --bind ~/VirtualBox\\ VMs/debian/debian-flat.vmdk /srv/ltsp/images/debian-vm.img\n</code></pre>"},{"location":"man/ltsp-kernel/#examples","title":"EXAMPLES","text":"<p>Typical use:</p> <pre><code>ltsp kernel x86_64\n</code></pre> <p>Passing a glob to locate the kernel and a regex to locate the initrd in a Debian live CD:</p> <pre><code>ltsp kernel --kernel-initrd=\"live/vmlinuz-* s|vmlinuz|initrd.img|\"\n</code></pre>"},{"location":"man/ltsp-nfs/","title":"ltsp-nfs","text":""},{"location":"man/ltsp-nfs/#name","title":"NAME","text":"<p>ltsp nfs - configure NFS exports for LTSP</p>"},{"location":"man/ltsp-nfs/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] nfs [-h nfs-home] [t nfs-tftp]</p>"},{"location":"man/ltsp-nfs/#description","title":"DESCRIPTION","text":"<p>Install /etc/exports.d/ltsp-nfs.conf in order to export /srv/ltsp ($BASE_DIR), /srv/tftp/ltsp ($TFTP_DIR) and optionally /home ($HOME_DIR).</p>"},{"location":"man/ltsp-nfs/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -h, --nfs-home=0|1 Export /home over NFS3. Defaults to 0. Note that NFS3 is insecure for home, so by default SSHFS is used. To specify a different directory, set $HOME_DIR in /etc/ltsp/ltsp.conf. -t, --nfs-tftp=0|1 Export /srv/tftp/ltsp over NFS3. Defaults to 1. To specify a different directory, set $TFTP_DIR in /etc/ltsp/ltsp.conf."},{"location":"man/ltsp-nfs/#examples","title":"EXAMPLES","text":"<p>To export /home over NFS (insecure), use the following ltsp.conf parameters:</p> <pre><code>[server]\nNFS_HOME=1\n\n[clients]\nFSTAB_HOME=\"server:/home /home nfs defaults,nolock 0 0\"\n</code></pre> <p>And run these commands on the server:</p> <pre><code>ltsp initrd  # This is needed whenever ltsp.conf is modified\nltsp nfs\n</code></pre> <p>To export only some user homes over NFS while the rest still use SSHFS, use these lines in ltsp.conf instead:</p> <pre><code>[server]\nNFS_HOME=1\nHOME_DIR=/home/nfs\n\n[clients]\nFSTAB_HOME=\"server:/home/nfs /home nfs defaults,nolock 0 0\"\n</code></pre> <p>Then run the following commands on the server, to move some home directories under /home/nfs and to create appropriate symlinks in case the users ever need to SSH to the server. Note that the NFS server doesn't follow symlinks outside of an export:</p> <pre><code>mkdir /home/nfs\nfor u in guest01 guest02; do\nmv \"/home/$u\" /home/nfs/\n    ln -s \"nfs/$u\" \"/home/$u\"\ndone\n\nltsp initrd\nltsp nfs\n</code></pre>"},{"location":"man/ltsp-remoteapps/","title":"ltsp-remoteapps","text":""},{"location":"man/ltsp-remoteapps/#name","title":"NAME","text":"<p>ltsp remoteapps - run applications on the LTSP server via ssh -X</p>"},{"location":"man/ltsp-remoteapps/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [ltsp-options] remoteapps application [parameters] ... ltsp [ltsp-options] remoteapps [-r register] application ...</p>"},{"location":"man/ltsp-remoteapps/#description","title":"DESCRIPTION","text":"<p>Setup passwordless SSH, by ensuring that ~/.ssh/authorized_keys contains one of the public user's SSH keys. Then execute <code>ssh -X server app params</code>. If the user has no SSH keys, a new one is generated. For <code>ltsp remoteapps app</code> to work, /home/username should already be mounted via NFS (on LTSP client boot) or SSHFS (on LTSP user login).</p>"},{"location":"man/ltsp-remoteapps/#options","title":"OPTIONS","text":"<p>See the ltsp(8) man page for ltsp-options.</p> -r, --register Register the specified applications as remoteapps, by creating symlinks in /usr/local/bin/application for each one of them. Since <code>/usr/local/bin</code> usually comes before <code>/usr/bin</code> in <code>$PATH</code>, the remoteapps should be invoked even if the application is selected from the system menu."},{"location":"man/ltsp-remoteapps/#examples","title":"EXAMPLES","text":"<p>The following ltsp.conf parameter can be used to register the MATE applications <code>users-admin</code> (Menu \u25b8 System \u25b8 Administration \u25b8 Users and Groups) and <code>mate-about-me</code> (Menu \u25b8 System \u25b8 Preferences \u25b8 Personal \u25b8 About Me) as remoteapps:</p> <pre><code>[clients]\nREMOTEAPPS=\"users-admin mate-about-me\"\n</code></pre> <p>That way, LTSP users are able to change their passwords or display names. The password change takes effect immediately, while for the new display name to appear in the LTSP client, the sysadmin must run <code>ltsp initrd</code> and the client needs to be rebooted.</p>"},{"location":"man/ltsp.conf/","title":"ltsp.conf","text":""},{"location":"man/ltsp.conf/#name","title":"NAME","text":"<p>ltsp.conf - client configuration file for LTSP</p>"},{"location":"man/ltsp.conf/#synopsis","title":"SYNOPSIS","text":"<p>The LTSP client configuration file is placed at <code>/etc/ltsp/ltsp.conf</code> and it loosely follows the .ini format. It is able to control various settings of the LTSP server and clients. After each ltsp.conf modification, the <code>ltsp initrd</code> command needs to be run so that it's included in the additional ltsp.img initrd that is sent when the clients boot.</p>"},{"location":"man/ltsp.conf/#creation","title":"CREATION","text":"<p>To create an initial ltsp.conf, run the following command:</p> <pre><code>install -m 0660 -g sudo /usr/share/ltsp/common/ltsp/ltsp.conf /etc/ltsp/ltsp.conf\n</code></pre> <p>The optional <code>-g sudo</code> parameter allows users in the sudo group to edit ltsp.conf with any editor (e.g. gedit) without running sudo.</p>"},{"location":"man/ltsp.conf/#syntax","title":"SYNTAX","text":"<p>Open and view the /etc/ltsp/ltsp.conf file that you just created, so that it's easier to understand its syntax.</p> <p>The configuration file is separated into sections:</p> <ul> <li>The special [server] section is evaluated only by the ltsp server.</li> <li>The special [common] section is evaluated by both the server and ltsp   clients.</li> <li>In the special [clients] section, parameters for all clients can be defined.   Most ltsp.conf parameters should be placed there.</li> <li>MAC address, IP address, or hostname sections can be used to apply settings   to specific clients. Those support globs, for example [192.168.67.*].</li> <li>It's also possible to group parameters into named sections like [crt_monitor]   in the example, and reference them from other sections with the INCLUDE=   parameter.</li> <li>Advanced users may also use [applet/host] sections, for example   [initrd-bottom/library*] would be evaluated by the <code>ltsp initrd-bottom</code>   applet only for clients that have a hostname that starts with \"library\".</li> </ul> <p>The ltsp.conf configuration file is internally transformed into a shell script, so all the shell syntax rules apply, except for the sections headers which are transformed into functions.</p> <p>This means that you must not use spaces around the \"=\" sign, and that you may write comments using the \"#\" character.</p> <p>The <code>ltsp initrd</code> command does a quick syntax check by running <code>sh -n /etc/ltsp/ltsp.conf</code> and aborts if it detects syntax errors.</p>"},{"location":"man/ltsp.conf/#parameters","title":"PARAMETERS","text":"<p>The following parameters are currently defined; an example is given in each case.</p> ADD_IMAGE_EXCLUDES=\"/etc/ltsp/add-image.excludes\" OMIT_IMAGE_EXCLUDES=\"home/*\" Add or omit items to the <code>ltsp image</code> exclusion list. Some files and directories shouldn't be included in the generated image. The initial list is defined in /usr/share/ltsp/server/image/image.excludes. It can be completely overridden by creating /etc/ltsp/image.excludes. ADD_IMAGE_EXCLUDES and OMIT_IMAGE_EXCLUDES can finetune the list by adding or removing lines to it. They can either be filenames or multiline text. AUTOLOGIN=\"user01\" RELOGIN=0|1 GDM3_CONF=\"WaylandEnable=false\" LIGHTDM_CONF=\"greeter-hide-users=true\" SDDM_CONF=\"/etc/ltsp/sddm.conf\" Configure the display manager to log in this user automatically. If SSHFS is used, the PASSWORDS_x parameter (see below) must also be provided. AUTOLOGIN can be a simple username like \"user01\", or it can be a partial regular expression that transforms a hostname to a username. For example, AUTOLOGIN=\"pc/guest\" means \"automatically log in as guest01 in pc01, as guest02 in pc02 etc\". Setting RELOGIN=0 will make AUTOLOGIN work only once. Finally, the *_CONF parameters can be either filenames or direct text, and provide a way to write additional content to the generated display manager configuration. CRONTAB_x=\"30 15   * * *   root    poweroff\" Add a line in crontab. The example powers off the clients at 15:30. CUPS_SERVER=\"$SERVER\" Set the CUPS server in the client /etc/cups/client.conf. Defaults to $SERVER. You're supposed to also enable printer sharing on the server by running <code>cupsctl _share_printers=1</code> or <code>system-config-printer</code> or by visiting http://localhost:631. Then all printers can be managed on the LTSP server. Other possible values are CUPS_SERVER=\"localhost\", when a printer is connected to a client, or CUPS_SERVER=\"ignore\", to skip CUPS server handling. DEBUG_LOG=0|1 Write warnings and error messages to /run/ltsp/debug.log. Defaults to 0. DEBUG_SHELL=0|1 Launch a debug shell when errors are detected. Defaults to 0. DEFAULT_IMAGE=\"x86_64\" KERNEL_PARAMETERS=\"nomodeset noapic\" MENU_TIMEOUT=\"5000\" These parameters can be defined under [mac:address] sections in ltsp.conf, and they are used by <code>ltsp ipxe</code> to generate the iPXE menu. They control the default menu item, the additional kernel parameters and the menu timeout for each client. They can also be defined globally under [server]. DISABLE_SESSION_SERVICES=\"evolution-addressbook-factory obex\" DISABLE_SYSTEM_SERVICES=\"anydesk teamviewerd\" KEEP_SESSION_SERVICES=\"at-spi-dbus-bus\" KEEP_SYSTEM_SERVICES=\"apparmor ssh\" MASK_SESSION_SERVICES=\"gnome-software-service update-notifier\" MASK_SYSTEM_SERVICES=\"apt-daily apt-daily-upgrade rsyslog\" Space separated lists of services to disable, permit or mask on LTSP clients. They mostly correspond to <code>systemctl disable/mask [--user]</code> invocations. Setting these ltsp.conf parameters adds or omits items from the default lists that are defined in <code>/usr/share/ltsp/client/init/56-services.sh</code>. Disabled services can be started on demand by e.g. dbus or socket activation, while masked services need to be manually unmasked first. Currently, MASK_SESSION_SERVICES also deletes the non-systemd user services from /etc/xdg/autostart. DNS_SERVER=\"8.8.8.8 208.67.222.222\" Specify the DNS servers for the clients. FSTAB_x=\"server:/home /home nfs defaults,nolock 0 0\" All parameters that start with FSTAB_ are sorted and then their values are written to /etc/fstab at the client init phase. HOSTNAME=\"pc01\" Specify the client hostname. Defaults to \"ltsp%{IP}\". HOSTNAME may contain the %{IP} pseudovariable, which is a sequence number calculated from the client IP and the subnet mask, or the %{MAC} pseudovariable, which is the MAC address without the colons. HOSTS_x=\"192.168.67.10 nfs-server\" All parameters that start with HOSTS_ are sorted and then their values are written to /etc/hosts at the client init phase. IMAGE_TO_RAM=0|1 Specifying this option under the [clients] section copies the rootfs image to RAM during boot. That makes clients less dependent on the server, but they must have sufficient memory to fit the image. INCLUDE=\"other-section\" Include another section in this section. LOCAL_SWAP=0|1 Activate local swap partitions. Defaults to 1. MULTISEAT=0|1 UDEV_SEAT_n_x=\"*/usb?/?-[2,4,6,8,10,12,14,16,18]/*\" MULTISEAT=1 tries to autodetect if an LTSP client has two graphics cards and to automatically split them along with the USB ports into two seats. Optional lines like <code>UDEV_SEAT_1_SOUND=\"*/sound/card1*\"</code> can be used to finetune the udev rules that will be generated and placed in a file named /etc/udev/rules.d/72-ltsp-seats.rules. NAT=0|1 Only use this under the [server] section. Normally, <code>ltsp service</code> runs when the server boots and detects if a server IP is 192.168.67.1, in which case it automatically enables IP forwarding for the clients to be able to access the Internet in dual NIC setups. But if there's a chance that the IP isn't set yet (e.g. disconnected network cable), setting NAT=1 enforces that. OMIT_FUNCTIONS=\"pam_main mask_services_main\" A space separated list of function names that should be omitted. The functions specified here will not be executed when called. This option can be specified in any [section]. PASSWORDS_x=\"teacher/cXdlcjEyMzQK [a-z][-0-9]*/MTIzNAo= guest[^:]*/\" A space separated list of regular expressions that match usernames, followed by slash and base64-encoded passwords. At boot, <code>ltsp init</code> writes those passwords for the matching users in /etc/shadow, so that then pamltsp can pass them to SSH/SSHFS. The end result is that those users are able to login either in the console or the display manager by just pressing [Enter] at the password prompt. Passwords are base64-encoded to prevent over-the-shoulder spying and to avoid the need for escaping special characters. To encode a password in base64, run <code>base64</code>, type a single password, and then Ctrl+D. In the example above, the teacher account will automatically use \"qwer1234\" as the password, the a1-01, b1-02 etc students will use \"1234\", and the guest01 etc accounts will be able to use an empty password without even authenticating against the server; in this case, SSHFS can't be used, /home should be local or NFS. POST_APPLET_x=\"ln -s /etc/ltsp/xorg.conf /etc/X11/xorg.conf\" All parameters that start with POST_ and then have an ltsp client applet name are sorted and their values are executed after the main function of that applet. See the ltsp(8) man page for the available applets. The usual place to run client initialization commands that don't need to daemonize is POST_INIT_x. PRE_APPLET_x=\"debug_shell\" All parameters that start with PRE_ and then have an ltsp client applet name are sorted and their values are executed before the main function of that applet. PWMERGE_SUR=, PWMERGE_SGR=, PWMERGE_DGR=, PWMERGE_DUR= Normally, all the server users are listed on the client login screens and are permitted to log in. To exclude some of them, define one or more of those regular expressions. For more information, read /usr/share/ltsp/client/login/pwmerge. For example, if you name your clients pc01, pc02 etc, and your users a01, a02, b01, b02 etc, then the following line only shows/allows a01 and b01 to login to pc01: <code>PWMERGE_SUR=\".*%{HOSTNAME#pc}\"</code> REMOTEAPPS=\"users-admin mate-about-me\" Register the specified applications as remoteapps, so that they're executed on the LTSP server via <code>ssh -X</code> instead of on the clients. For more information, see ltsp-remoteapps(8). RPI_IMAGE=\"raspios\" Select this LTSP image to boot Raspberry Pis from. This symlinks all $BASE_DIR/$RPI_IMAGE/boot/* files directly under $TFTP_DIR when <code>ltsp kernel $RPI_IMAGE</code> is called. See the Raspberry Pi OS documentation page for more information. SEARCH_DOMAIN=\"ioa.sch.gr\" A search domain to add to resolv.conf and to /etc/hosts. Usually provided by DHCP. SERVER=\"192.168.67.1\" The LTSP server is usually autodetected; it can be manually specified if there's need for it. X_DRIVER=\"vesa\" X_HORIZSYNC=\"28.0-87.0\" X_MODELINE='\"1024x768_85.00\"   94.50  1024 1096 1200 1376  768 771 775 809 -hsync +vsync' X_MODES='\"1024x768\" \"800x600\" \"640x480\"' X_PREFERREDMODE=\"1024x768\" X_VERTREFRESH=\"43.0-87.0\" X_VIRTUAL=\"800 600\" If any of these parameters are set, the /usr/share/ltsp/client/init/xorg.conf template is installed to /etc/X11/xorg.conf, while applying the parameters. Read that template and consult xorg.conf(5) for more information. The most widely supported method to set a default resolution is X_MODES. If more parameters are required, create a custom xorg.conf as described in the EXAMPLES section."},{"location":"man/ltsp.conf/#examples","title":"EXAMPLES","text":"<p>To specify a hostname and a user to autologin in a client:</p> <pre><code>[3c:07:71:a2:02:e3]\nHOSTNAME=pc01\nAUTOLOGIN=user01\nPASSWORDS_PC01=\"user01/cGFzczAxCg==\"\n</code></pre> <p>The password above is \"pass01\" in base64 encoding. To calculate it, the <code>base64</code> command was run in a terminal:</p> <pre><code>base64\npass01\n&lt;press Ctrl+D at this point&gt;\ncGFzczAxCg==\n</code></pre> <p>If some clients need a custom xorg.conf file, create it in e.g. <code>/etc/ltsp/xorg-nvidia.conf</code>, and put the following in ltsp.conf to dynamically symlink it for those clients at boot:</p> <pre><code>[pc01]\nINCLUDE=nvidia\n\n[nvidia]\nPOST_INIT_LN_XORG=\"ln -sf ../ltsp/xorg-nvidia.conf /etc/X11/xorg.conf\"\n</code></pre> <p>Since ltsp.conf is transformed into a shell script and sections into functions, it's possible to directly include code or to call sections at POST_APPLET_x hooks.</p> <pre><code>[clients]\n# Allow local root logins by setting a password hash for the root user.\n# The hash contains $, making it hard to escape in POST_INIT_x=\"sed ...\".\n# So put sed in a section and call it at POST_INIT like this:\nPOST_INIT_SET_ROOT_HASH=\"section_set_root_hash\"\n\n# This is the hash of \"qwer1234\"; cat /etc/shadow to see your hash.\n[set_root_hash]\nsed 's|^root:[^:]*:|root:$6$VRfFL349App5$BfxBbLE.tYInJfeqyGTv2lbk6KOza3L2AMpQz7bMuCdb3ZsJacl9Nra7F/Zm7WZJbnK5kvK74Ik9WO2qGietM0:|' -i /etc/shadow\n</code></pre>"},{"location":"man/ltsp/","title":"ltsp","text":""},{"location":"man/ltsp/#name","title":"NAME","text":"<p>ltsp - entry point to Linux Terminal Server Project applets</p>"},{"location":"man/ltsp/#synopsis","title":"SYNOPSIS","text":"<p>ltsp [-b base-dir] [-h] [-m home-dir] [-o overwrite] [-t tftp-dir] [-V] [applet] [applet-options]</p>"},{"location":"man/ltsp/#description","title":"DESCRIPTION","text":"<p>Run the specified LTSP applet with applet-options. To get help with applets and their options, run `man ltsp applet` or `ltsp --help applet`.</p>"},{"location":"man/ltsp/#applets","title":"APPLETS","text":"<p>The following applets are currently defined:</p> <ul> <li>dnsmasq: configure dnsmasq for LTSP</li> <li>image: generate a squashfs image from an image source</li> <li>info: gather support information about the LTSP installation</li> <li>initrd: create the ltsp.img initrd add-on</li> <li>ipxe: install iPXE binaries and configuration in TFTP</li> <li>kernel: copy the kernel and initrd from an image to TFTP</li> <li>nfs: configure NFS exports for LTSP</li> </ul> <p>LTSP clients also have some additional applets, like initrd-bottom, init and login, but they're not runnable by the user.</p>"},{"location":"man/ltsp/#options","title":"OPTIONS","text":"<p>LTSP directories can be configured by passing one or more of the following parameters, but it's recommended that an /etc/ltsp/ltsp.conf configuration file is created instead, so that you don't have to pass them in each ltsp command.</p> -b, --base-dir=/srv/ltsp This is where the chroots, squashfs images and virtual machine symlinks are; so when you run <code>ltsp kernel img_name</code>, it will search either for a squashfs image named /srv/ltsp/images/img_name.img, or for a chroot named /srv/ltsp/img_name, if it's a directory that contains /proc. Additionally, <code>ltsp image img_name</code> will also search for a symlink to a VM disk named /srv/ltsp/img_name.img. $BASE_DIR is exported read-only by NFSv3, so do not put sensitive data there. -h, --help Display a help message. -m, --home-dir=/home The default method of making /home available to LTSP clients is SSHFS. In some cases security isn't an issue, and sysadmins prefer the insecure NFSv3 speed over SSHFS. $HOME_DIR is used by <code>ltsp nfs</code> to export the correct directory, if it's different to /home, and by LTSP clients to mount it. -o, --overwrite[=0|1] Overwrite existing files. Defaults to 1 as administrators are not supposed to manually edit LTSP autogenerated files, but maintain local content into separate files (e.g. /etc/exports.d/local.exports). If you manually maintain ltsp.ipxe, it might be a good idea to set OVERWRITE=0 in ltsp.conf. -t, --tftp-dir=/srv/tftp LTSP places the kernels, initrds and iPXE files in /srv/tftp/ltsp, to be retrieved by the clients via the TFTP protocol. The TFTP server of dnsmasq and tftpd-hpa are configured to use /srv/tftp as the TFTP root. -V, --version Display the version information."},{"location":"man/ltsp/#files","title":"FILES","text":"/etc/ltsp/ltsp.conf All the long options can also be specified as variables in the ltsp.conf configuration file in UPPER_CASE, using underscores instead of hyphens."},{"location":"man/ltsp/#environment","title":"ENVIRONMENT","text":"<p>All the long options can also be specified as environment variables in UPPER_CASE, for example:</p> <pre><code>BASE_DIR=/opt/ltsp ltsp kernel ...\n</code></pre>"},{"location":"man/ltsp/#examples","title":"EXAMPLES","text":"<p>The following are the typical commands to install and maintain LTSP in chrootless mode:</p> <pre><code># To install:\nltsp image /\nltsp dnsmasq\nltsp nfs\nltsp ipxe\n\n# To update the exported image, after changes in the server software:\nltsp image /\n</code></pre> <p>The following are the typical commands to provide an additional x86_32 image, assuming one uses VirtualBox. If you specifically name it x86_32, then the ltsp.ipxe code automatically prefers it for 32bit clients:</p> <pre><code>ln -rs $HOME/VirtualBox\\ VMs/x86_32/x86_32-flat.vmdk /srv/ltsp/x86_32.img\nltsp image x86_32\nltsp ipxe\n</code></pre>"}]}